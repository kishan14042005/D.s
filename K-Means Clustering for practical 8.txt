Aim:- K-Means Clustering 
ï‚· Apply the K-Means algorithm to group similar data 
points into clusters.  


Code in Python:-  


import pandas as pd  
from sklearn.preprocessing import MinMaxScaler  
from sklearn.cluster import KMeans  
import matplotlib.pyplot as plt  
data = pd.read_csv('Wholesale.csv')  
data.head()  
print(data.head())


Determine the optimal number of clusters using 
elbow method or silhouette analysis.  

Code:- 

 categorical_features=['Channel', 'Region' ] 
continuous_features=['Fresh',  'Milk', 'Grocery', 'Frozen', 
'Detergents_Paper', 'Delicassen'] 
data[continuous_features].describe() 
print(data[continuous_features].describe())


Visualize the clustering results and analyze the 
cluster characteristics. 

Code:- 

for col in categorical_features: 
    dummies=pd.get_dummies(data[col],prefix=col) 
    data=pd.concat([data, dummies],axis=1) 
    data.drop(col, axis=1, inplace=True) 
data.head() 
print(data.head())

mms=MinMaxScaler() 
mms.fit(data) 
data_transformed=mms.transform(data) 
Sum_of_squared_distances=[] 
K=range(1,4) 
for k in K: 
    km=KMeans(n_clusters=k) 
    km=km.fit(data_transformed) 
    Sum_of_squared_distances.append(km.inertia_) 
plt.plot(K, Sum_of_squared_distances, 'bx-') 
plt.xlabel('k') 
plt.ylabel('Sum_of_squared_distances') 
plt.title('Elbow Method For Optimal k') 
plt.show()
